# This file is automatically generated by generate_todo.py.
# Files that start with an underscore ("_") have been excluded.

./parsimony/estimators.py:
-------------------------
73: # TODO: Is this a good name?

277: # TODO: Should we use a seed here so that we get deterministic results?

393: # TODO: Should we use a seed here so that we get deterministic results?

552: # TODO: Should we use a seed here so that we get deterministic results?

716: # TODO: Should we use a seed here so that we get deterministic results?

1030: # TODO: Should we use a seed here so that we get deterministic results?

1207: # TODO: Should we use a seed here so that we get deterministic results?

./parsimony/algorithms/explicit.py:
----------------------------------
601: # TODO: Warn if G_new < 0.

1030: # TODO: We already have f_mid, so we can return a better approximation
1031: # here!

1120: # TODO: Handle the other cases!

1220: # TODO: Investigate what is a good default value here!

1273: # TODO: Investigate what is a good default value here!

1312: # TODO: Does the weights really matter when the function is the
1313: # indicator function?

1347: # TODO: Investigate what is a good default value here!

./parsimony/algorithms/implicit.py:
----------------------------------
110: # TODO: Use module for this!
111: #            t = np.random.rand(X.shape[0], 1)

126: # TODO: Use module for this!
127: #            v = np.random.rand(X.shape[1], 1)
128: #            v /= maths.norm(v)

188: # TODO: Use module for this!

204: # TODO: Use module for this!

./parsimony/algorithms/multiblock.py:
------------------------------------
126: for it in xrange(self.outer_iter):  # TODO: Get number of iterations!

./parsimony/utils/utils.py:
--------------------------
21: #TODO: This depends on the OS. We should try to be clever here ...

./parsimony/utils/consts.py:
---------------------------
16: # TODO: MAX_ITER is heavily algorithm-dependent, so we have to think about if
17: # we should include a package-wide maximum at all.

./parsimony/datasets/regression/dice5.py:
----------------------------------------
32: # TODO: This is wrong. Shape should be Z, Y, X.

./parsimony/functions/interfaces.py:
-----------------------------------
98: # TODO: Should all constraints have the projection operator?

185: # TODO: This should be in the NesterovFunction interface, right?

297: # TODO: Should L by default take a weight vector as argument?

./parsimony/functions/losses.py:
-------------------------------
185: # TODO: Inherit from LinearRegression and add an L2 constraint instead!

362: # TODO: Make the weights sparse.
363: #weights = np.eye(self.X.shape[0])

365: # TODO: Allow the weight vector to be a list.

470: # TODO: Use FastSVD for speedup!

472: self._L = np.max(s) ** 2.0  # TODO: CHECK

632: PWX = 0.5 * np.sqrt(self.weights) * self.X  # TODO: CHECK WITH FOUAD
633: # PW = 0.5 * np.eye(self.X.shape[0]) ## miss np.sqrt(self.W)
634: #PW = 0.5 * np.sqrt(self.W)
635: #PWX = np.dot(PW, self.X)
636: # TODO: Use FastSVD for speedup!

638: self._L = np.max(s) ** 2.0  # TODO: CHECK

643: self._L += self.k  # TODO: CHECK

661: # TODO: Handle mean here?

./parsimony/functions/penalties.py:
----------------------------------
520: # TODO: Check if this is correct!

1067: # TODO: We can share variables between f and df and speed up
1068: # some shared computations.

./parsimony/functions/combinedfunctions.py:
------------------------------------------
35: # TODO: Add penalty_start and mean to all of these!

107: # TODO: We currently only allow one proximal operator. Fix this!

160: # TODO: We currently only allow one proximal operator. Fix this!

628: # TODO: This is not good. Solve this better!

1099: # TODO: This is not a good solution. Can we solve this in a better way?

1151: # TODO: Use max_iter here!!

1201: # TODO: Kernelise this function! See how I did in
1202: # LinearRegressionL1L2TV._beta_hat.

1244: # TODO: Add this function or refactor API!

1327: # TODO: This is not a nice solution. Can we solve it better?

./parsimony/functions/multiblock/losses.py:
------------------------------------------
581: # TODO: Check instead if it is a numpy array.

./parsimony/functions/nesterov/l1tv.py:
--------------------------------------
62: # WARNING: Number of non-zero rows may differ from p.

149: # TODO: Instead of p, this should really be the number of non-zero
150: # rows of A.

161: # TODO: Add max_iter here!!

./parsimony/functions/nesterov/L1TV.py:
--------------------------------------
62: # WARNING: Number of non-zero rows may differ from p.

149: # TODO: Instead of p, this should really be the number of non-zero
150: # rows of A.

161: # TODO: Add max_iter here!!

./parsimony/functions/nesterov/tv.py:
------------------------------------
147: # TODO: This only work if the elements of self._A are scipy.sparse. We
148: # should allow dense matrices as well.

151: # TODO: Instead of p, this should really be the number of non-zero
152: # rows of A.

162: # TODO: Add max_iter here!

264: # TODO: This is the wrong order of the dimensions. They should be reversed.

./parsimony/tests/test_simulations.py:
-------------------------------------
117: # TODO: Not done. Add more!!

./parsimony/tests/tests.py:
--------------------------
93: # TODO: Wait for Nose issue #732: https://github.com/nose-devs/nose/issues/732
94: #    @nottest
95: #    def runTest(self):
96: #        """Runs all unit tests.
97: #
98: #        From baseclass "unittest.TestCase".
99: #        """
100: #        RE_TEST = re.compile("[Tt]est[-_]")
101: #        for attr in dir(self):
102: #            if callable(getattr(self, attr)) and RE_TEST.match(attr):
103: #                getattr(self, attr)()

110: # TODO: There is a better way to do this!

./parsimony/tests/test_logistic_regression.py:
---------------------------------------------
16: # TODO: Test penalty_start.

18: # TODO: Test total variation.

./parsimony/tests/spamsdata.py:
------------------------------
71: # TODO: Don't use print directly.

