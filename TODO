# This file is automatically generated by generate_todo.py.
# Files that start with an underscore ("_") have been excluded.

./parsimony/estimators.py:
-------------------------
64: # TODO: Is this a good name?

264: # TODO: Should we use a seed here so that we get deterministic results?

350: # TODO: Should we use a seed here so that we get deterministic results?

./parsimony/algorithms.py:
-------------------------
40: #TODO: This depends on the OS. We should try to be clever here ...

154: # TODO: Use module for this!

170: # TODO: Use module for this!

234: # TODO: Use module for this!

250: # TODO: Use module for this!

335: # TODO: We should use a step size here instead of the
336: # Lipschitz constant. All functions don't have L, but will
337: # still run in FISTA with a small enough step size.
338: # Updated: Use StepSize instead!!

382: # TODO: Change the functions so that we can use the StepSize API here.

509: # TODO: We should use a step size here instead of the
510: # Lipschitz constant. All functions don't have L, but will
511: # still run in FISTA with a small enough step size.
512: # Updated: Use StepSize instead!!

540: # TODO: Change the functions so that we can use the StepSize API here.

652: # TODO: Use StepSize instead.

670: # TODO: Use StepSize instead.

700: # TODO: Warn if G_new < 0.

1132: for it in xrange(self.outer_iter):  # TODO: Get number of iterations!

./parsimony/utils/utils.py:
--------------------------
77: # TODO: Should this one be in functions.interfaces.Gradient instead?

./parsimony/utils/consts.py:
---------------------------
14: # TODO: MAX_ITER is heavily algorithm-dependent, so we have to think about if
15: # we should include a package-wide maximum at all.

./parsimony/datasets/samples_generator_struct.py:
------------------------------------------------
9: # TODO: Remove dependence on scikit learn.

./parsimony/functions/interfaces.py:
-----------------------------------
172: # TODO: This should be in the NesterovFunction interface, right?

./parsimony/functions/losses.py:
-------------------------------
167: # TODO: Make the weights sparse.
168: #weights = np.eye(self.X.shape[0])

170: # TODO: Allow the weight vector to be a list.

225: PWX = 0.5 * np.sqrt(self.weights) * self.X  # TODO: CHECK WITH FOUAD
226: # PW = 0.5 * np.eye(self.X.shape[0]) ## miss np.sqrt(self.W)
227: #PW = 0.5 * np.sqrt(self.W)
228: #PWX = np.dot(PW, self.X)
229: # TODO: Use FastSVD for speedup!

231: self.lipschitz = np.max(s) ** 2.0 + self.k  # TODO: CHECK

./parsimony/functions/penalties.py:
----------------------------------
448: # TODO: Tweak these magic numbers on real data. Or even better,
449: # find theoretical bounds. Convergence is faster if these bounds
450: # are close to accurate when we start the bisection algorithm.

537: # TODO: Tweak these magic numbers on real data. Or even better,
538: # find theoretical bounds. Convergence is faster if these bounds
539: # are close to accurate when we start the bisection algorithm.

./parsimony/functions/objectives/functions.py:
---------------------------------------------
548: # TODO: This is not good. Solve this better!

833: # TODO: This is not good. Solve this better!

882: # TODO: Use max_iter here!!

922: # TODO: Kernelise this function! See how I did in RR_L1_TV._beta_hat.

964: # TODO: Add this function or refactor API!

./parsimony/functions/multiblock/losses.py:
------------------------------------------
141: # TODO: Check instead if it is a numpy array.

./parsimony/functions/nesterov/L1TV.py:
--------------------------------------
55: # WARNING: Number of non-zero rows may differ from p.

140: # TODO: Instead of p, this should really be the number of non-zero
141: # rows of A.

152: # TODO: Add max_iter here!!

./parsimony/functions/nesterov/tv.py:
------------------------------------
147: # TODO: Instead of p, this should really be the number of non-zero
148: # rows of A.

158: # TODO: Add max_iter here!

./parsimony/tests/spamsdata.py:
------------------------------
68: # TODO: Don't use print directly.

