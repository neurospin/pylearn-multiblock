# -*- coding: utf-8 -*-
"""
Created on Fri Nov 22 10:42:07 2013

@author: jinpeng
"""
import unittest


class TestFISTA(unittest.TestCase):
    def test_fista(self):
        import numpy as np
        import parsimony.estimators as estimators
        import parsimony.algorithms as algorithms
        import parsimony.tv
        shape = (4, 4, 1)
        num_samples = 10
        num_ft = shape[0] * shape[1] * shape[2]
        X = np.random.random((num_samples, num_ft))
        y = np.random.randint(0, 2, (num_samples, 1))
        k = 0  # ridge regression coefficient
        l = 0.05  # l1 coefficient
        g = 0  # tv coefficient
        # ================================================================
        # using spams
#        import spams
#        spams_X = np.asfortranarray(X)
#        spams_X = np.asfortranarray(spams_X - np.tile(
#                                    np.mean(spams_X, 0),
#                                   (spams_X.shape[0], 1)))
#        spams_X = spams.normalize(spams_X)
#        spams_Y = np.asfortranarray(y)
#        spams_Y = np.asfortranarray(spams_Y - np.tile(
#                                    np.mean(spams_Y, 0),
#                                    (spams_Y.shape[0], 1)))
#        spams_Y = spams.normalize(spams_Y)
#        W0 = np.zeros((spams_X.shape[1], spams_Y.shape[1]),
#                       dtype=np.float64,
#                       order="FORTRAN")
#        param = {'numThreads': 1, 'verbose': True,
#             'lambda1': l, 'it0': 10, 'max_it': 200,
#             'L0': 0.1, 'tol': 1e-3, 'intercept': False,
#             'pos': False}
#        param['compute_gram'] = True
#        param['loss'] = 'square'
#        param['regul'] = 'l1'
#        (W, optim_info) = spams.fistaFlat(spams_Y,
#                                          spams_X,
#                                          W0,
#                                          True,
#                                          **param)
#        print "spams_X =", repr(spams_X)
#        print "spams_Y =", repr(spams_Y)
#        print "W=", repr(W)
        # ================================================================
        # using pre-computed values
        spams_X = np.asarray([[ -3.60869396e-01,  -4.10444409e-01,  -3.31693265e-01,
                          2.78974507e-01,   2.98888485e-01,   7.56010556e-02,
                          3.04113922e-02,   2.77141602e-01,   2.36787701e-01,
                         -4.52010629e-02,  -2.71423741e-01,   6.50347941e-02,
                          4.46991496e-01,  -3.92364934e-01,   4.82375009e-01,
                          2.71813499e-01],
                       [  1.04317728e-01,  -3.18621439e-02,   2.78530754e-01,
                         -2.23718669e-02,   2.10970621e-01,  -3.62732039e-01,
                         -2.32748837e-01,   4.86719404e-01,   2.71916751e-01,
                         -3.09840688e-01,  -2.52973909e-01,  -1.77975160e-01,
                         -4.00341741e-01,  -1.47076165e-01,  -3.63954423e-01,
                         -1.31728952e-01],
                       [ -7.61429042e-02,  -3.95227213e-01,   4.30031185e-01,
                          3.01008512e-01,   5.48049364e-01,   4.30749894e-01,
                          4.58999082e-01,   1.06573204e-01,  -4.60346243e-01,
                          3.88620975e-01,   9.53635712e-02,   7.78302270e-02,
                          2.77474281e-01,   7.89617165e-03,  -7.54217545e-02,
                          1.57226541e-01],
                       [ -3.83772171e-01,   4.19190566e-01,  -2.76850588e-01,
                         -2.85392435e-01,  -5.28776838e-01,  -4.68351998e-01,
                         -4.05626991e-01,  -6.15357397e-01,   4.36997742e-01,
                          2.39255417e-01,   6.04337535e-01,   6.53527944e-01,
                          3.42414577e-01,   5.42880543e-01,   2.24591149e-04,
                          3.15413742e-01],
                       [ -2.16383099e-01,   3.10854665e-02,  -4.92903551e-02,
                          4.15588175e-01,  -3.57979141e-01,   3.40266278e-01,
                         -3.78196886e-01,   1.63966801e-01,  -2.27647249e-02,
                         -3.77935190e-01,   2.22207203e-01,  -2.08515103e-01,
                          2.57127016e-01,  -2.60705490e-01,  -3.98198554e-01,
                          2.57382518e-01],
                       [  4.92515684e-01,   3.74733015e-01,   1.45461576e-01,
                         -3.66510196e-01,   1.66607035e-01,   1.47138736e-01,
                         -2.87934229e-01,  -1.58399649e-02,   2.11967616e-01,
                          6.94527531e-02,  -4.36593274e-01,   4.42325148e-01,
                          2.54597701e-02,  -3.21438905e-01,   6.39805488e-01,
                         -4.40269729e-01],
                       [  4.20892666e-01,  -1.47767949e-01,  -2.70990158e-01,
                         -4.55589123e-01,  -3.24734618e-01,   4.29683706e-01,
                          1.35900787e-01,   2.38717992e-01,   2.50537367e-01,
                         -1.84905036e-01,  -1.81130985e-01,  -1.62490806e-01,
                         -1.63251770e-01,  -1.11240570e-01,   8.76392475e-02,
                         -1.93406012e-01],
                       [  3.94160529e-01,  -3.86961846e-01,   4.54824651e-01,
                         -2.93614534e-01,   7.22146631e-03,  -8.98311207e-02,
                          6.48543673e-02,  -4.05032092e-01,  -4.82658845e-01,
                         -1.88382838e-01,  -2.81907547e-01,  -4.78416591e-01,
                         -3.49314197e-01,   2.96473215e-01,  -1.70089580e-01,
                          3.18962771e-01],
                       [ -2.70119978e-01,   4.07577216e-01,   1.05562409e-01,
                          3.83144756e-01,  -1.20977532e-01,  -2.77877813e-01,
                          5.64433140e-01,  -2.18551116e-01,  -3.39655856e-01,
                         -2.38666087e-01,   3.20639444e-01,  -1.89907043e-01,
                         -4.78048127e-01,  -1.10313479e-01,  -5.55832894e-02,
                          6.22300868e-02],
                       [ -1.04599059e-01,   1.39677297e-01,  -4.85586211e-01,
                          4.47622046e-02,   1.00731157e-01,  -2.24646699e-01,
                          4.99081728e-02,  -1.83384340e-02,  -1.02781509e-01,
                          6.47601757e-01,   1.81481703e-01,  -2.14134107e-02,
                          4.14886952e-02,   4.95889614e-01,  -1.46796735e-01,
                         -6.17624464e-01]])
        spams_Y= np.asarray([[ 0.15811388],
                           [ 0.15811388],
                           [ 0.15811388],
                           [ 0.15811388],
                           [ 0.15811388],
                           [ 0.15811388],
                           [ 0.15811388],
                           [-0.63245553],
                           [ 0.15811388],
                           [-0.63245553]])
        W = np.asarray([[ 0.        ],
                       [ 0.        ],
                       [ 0.30148832],
                       [ 0.        ],
                       [ 0.        ],
                       [ 0.07405895],
                       [ 0.18303197],
                       [ 0.        ],
                       [ 0.54508139],
                       [ 0.        ],
                       [ 0.46926991],
                       [ 0.19334929],
                       [ 0.        ],
                       [-0.68180284],
                       [ 0.        ],
                       [ 0.05787209]])
        # ================================================================
        # using pre-computed values
        Ax, Ay, Az, n_compacts = parsimony.tv.tv_As_from_shape(shape)
        tvl1l2_fista = estimators.LinearRegressionL1L2TV(k, l, g, [Ax, Ay, Az],
                                            algorithm=algorithms.fista)
        tvl1l2_fista.fit(spams_X, spams_Y)
        error = np.sum(np.absolute(tvl1l2_fista.beta - W))
        self.assertTrue(error < 0.01)
        err1 = np.sum(np.absolute(
                      np.dot(spams_X, tvl1l2_fista.beta) - spams_Y))
        err2 = np.sum(np.absolute(np.dot(spams_X, W) - spams_Y))
        self.assertTrue(err1 - err2 < 0.01)

if __name__ == "__main__":
    unittest.main()
