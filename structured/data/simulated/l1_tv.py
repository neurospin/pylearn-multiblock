# -*- coding: utf-8 -*-
"""
Created on Tue Jul 30 08:52:51 2013

@author: Tommy Löfstedt
@email: tommy.loefstedt@cea.fr
"""

__all__ = ['load']

import numpy as np
import structured.utils as utils
import structured.algorithms as algorithms


def load(l, gamma, density, snr, M, e):
    """Returns data generated such that we know the exact solution.

    The data generated by this function is fit to the Linear regression + TV
    loss function, i.e.:

        f(b) = (1 / 2).|Xb - y|² + gamma.TV(b),

    where TV(.) is the TV penalty.

    Parameters
    ----------
    l : The L1 regularisation parameter.

    gamma : The TV regularisation parameter.

    density : The density of the returned regression vector (fraction of
            non-zero elements). Must be in (0, 1].

    snr : Signal to noise ratio between model and residual.

    M : The matrix to use when building data. This matrix carries the desired
            distribution of the generated data. The generated data will be a
            column-scaled version of this matrix.

    e : The error vector e = Xb - y. This vector carries the desired
            distribution of the residual.

    Returns
    -------
    X : The generated X matrix.

    y : The generated y vector.

    beta : The generated regression vector.
    """
    seed = np.random.randint(2147483648)

    low = 0.0
    high = 1.0
    for i in xrange(30):
        np.random.seed(seed)
        X, y, beta = _generate(l, gamma, density, high, M, e)
        val = np.sqrt(np.sum(np.dot(X, beta) ** 2.0) / np.sum(e ** 2.0))
        if val > snr:
            break
        else:
            low = high
            high = high * 2.0

    def f(x):
        np.random.seed(seed)
        X, y, beta = _generate(l, gamma, density, x, M, e)
        return np.sqrt(np.sum(np.dot(X, beta) ** 2.0) / np.sum(e ** 2.0)) - snr

    bm = algorithms.BisectionMethod(max_iter=20)
    bm.run(utils.AnonymousClass(f=f), low, high)

    np.random.seed(seed)
    X, y, beta = _generate(l, gamma, density, bm.x, M, e)
    print "snr = %.5f = %.5f = |X.b| / |e| = %.5f / %.5f" \
            % (snr, np.linalg.norm(np.dot(X, beta) / np.linalg.norm(e)),
               np.linalg.norm(np.dot(X, beta)), np.linalg.norm(e))

    return X, y, beta
#    return _generate(l, gamma, density, snr, M, e)


def _generate(l, gamma, density, snr, M, e):

    l = float(l)
    gamma = float(gamma)
    density = float(density)
    snr = float(snr)
    p = M.shape[1]
    ps = int(round(p * density))

    beta = np.zeros((p, 1))
    for i in xrange(p):
        if i < ps:
            beta[i, 0] = U(0, 1) * snr / np.sqrt(ps)
        else:
            beta[i, 0] = 0
    beta = np.flipud(np.sort(beta, axis=0))

    X = np.zeros(M.shape)
    for i in xrange(p):
        Mte = np.dot(M[:, i].T, e)
        if abs(Mte) < utils.TOLERANCE:  # Avoid to make alpha very large
            Mte = 1.0
        alpha = 0.0

        if i < ps:
            alpha += -l * sign(beta[i, 0])
        else:
            alpha += -l * U(-1, 1)

#        alpha += -(1.0 - l) * beta[i, 0]

        if i == 0:  # Case 1: Positive edge: [i>0, >0, ...]
            alpha += -gamma * 1.0

        elif i < ps:  # Case 2 and 3: Positive: [..., >0, i>0, >0/0, ...]
            alpha += -gamma * 0.0

        elif i == ps:  # Case 4: First zero: [..., >0, x==0, 0, ...]
            alpha += -gamma * (U(-1, 1) - 1)

        elif i < p - 1:  # Case 5: Zero left and right: [..., 0, x==0, 0, ...]
            alpha += -gamma * (U(-1, 1) + U(-1, 1))

        elif i == p - 1:  # Case 6: Zero edge: [..., 0, x==0]
            alpha += -gamma * U(-1, 1)

        alpha /= Mte

        X[:, i] = alpha * M[:, i]

    y = np.dot(X, beta) - e

    print X

    return X, y, beta


def U(a, b):
    t = max(a, b)
    a = float(min(a, b))
    b = float(t)
    return (np.random.rand() * (b - a)) + a


def sign(x):
    if x > 0:
        return 1.0
    elif x < 0:
        return -1.0
    else:
        return 0.0